#!/bin/bash

server_list=()
SSH_INTELLIGENCE_AUTO_LOGIN_CONFIGURE_DIR=.ssha
# load include server list configure
if [ $SSH_INTELLIGENCE_AUTO_LOGIN_CONFIGURE_DIR ]; then
	# Determine whether the configuration folder exists
	if [ -d $SSH_INTELLIGENCE_AUTO_LOGIN_CONFIGURE_DIR ];then
		# Traversing each configuration
		for config_file in $SSH_INTELLIGENCE_AUTO_LOGIN_CONFIGURE_DIR/*;do 
			if [ "${config_file##*.}"x = "ini"x ]||[ "${config_file##*.}"x = "conf"x ];then
    				while read line_configure;do
                        eval $line_configure
					done < $config_file
                    #server_list[${Index}]="${Index} ${Name} ${Host} ${Port} ${User} ${PasswordOrKey}"
                    server_list[${#server_list[*]}]="${Index} ${Name} ${Host} ${Port} ${User} ${PasswordOrKey}"
			else
				echo "file not rule" && exit 1
			fi
		done
	else
		echo  "SSH_INTELLIGENCE_AUTO_LOGIN_CONFIGURE_DIR nothing configure files" && exit 1
	fi
else
	echo -e "Please setting SSH_INTELLIGENCE_AUTO_LOGIN_CONFIGURE_DIR \nmkdir ~/.ssha" && exit 1
fi

# server length
server_list_length=${#server_list[*]}

# list server
function list() {
    echo -e "ID\tIndex\tDescription\t\tPort\tHost\t\tUser\tPassword|SecretKeyFile"
    echo ${server_list_length}
    for ((i=0;i<${server_list_length};i++));do
        servers=(${server_list[$i]})
        serverIndex=$(($i+1))
        echo -e "$i\t${servers[0]}\t${servers[1]}\t\t${servers[2]}\t${servers[3]}\t${servers[4]}\t********\t"
        #密码脱敏
    done
}

function usage() {
    echo "usege:"
    echo "ssha [-h] [-l] [-s <server alias>]"
    exit 0
}

function login(){
    # echo $1
    # echo $0
    # echo $server_list
    server=(${server_list[$1]})
    # echo ${server_list[$1]} 
    # echo $1
    echo "$USER logging into the【${server[1]}】 server"

	command="
        expect {
                \"*assword\" {set timeout 6000; send \"${server[5]}\n\"; exp_continue ; sleep 3; }
                \"*passphrase\" {set timeout 6000; send \"${server[5]}\r\n\"; exp_continue ; sleep 3; }
                \"yes/no\" {send \"yes\n\"; exp_continue;}
                \"Last*\" {  send_user \"\nsuccessfully logined 【${server[1]}】\n\";}
        }
       interact
    ";
   pem=${server[5]}
   if [ -f "$pem" ]
   then
	expect -c "
		spawn ssh -p ${server[2]} -i ${server[5]} ${server[3]}@${server[2]}
		${command}
	"
   else
	expect -c "
		spawn ssh -p ${server[3]} ${server[4]}@${server[2]}
		${command}
	"
   fi
    echo -e "\t$USER logged out the【${server[1]}】 server\t" 
}
# clear screen
clear
while getopts hls ARGS  
do  
case $ARGS in   
    s)
        list
        echo '输入想要链接会话的ID：'
        read id
        echo '系好安全带，准备出发，目标：'$id
        login $id
        #echo $OPTARG
        ;;
    l)
        list
        exit 0
        ;;
    h)  
        usage
        ;;  
    *)  
        usage
        ;;
esac
done
